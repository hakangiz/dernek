@model Dernek.Models.activity
@using Dernek.Models.EnumProperty;
@using Dernek.Models
@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm("asdasd"))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>activity</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.recordDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.recordDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.recordDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.startDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.startDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.startDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.endDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.endDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.endDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.location, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.location, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.location, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.quantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.quantity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.quantity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.cost, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.cost, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.cost, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.km, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.km, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.km, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.createrUserId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.createrUserId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.createrUserId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.dancerPerRate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.dancerPerRate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.dancerPerRate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.status, Enum.GetValues(typeof(enums.activityStatus)).Cast<enums.activityStatus>().Select(model => new SelectListItem { Text = model.ToString(), Value = model.ToString() }))
                @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
            </div>
        </div>

        @*Add Extra payment*@
        <div class="panel panel-default">
            <div class="panel-heading">Aktivite Extra Ödemeler</div>
            <div class="panel-body">
                <table class="table">
                    @{
                        //var paymentModel = Model.Payments.FirstOrDefault();
                        //if (paymentModel != null)
                        //{
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(m => m.name)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(m=>m.Payments.First().payTotal)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(m => m.Payments.First().paymentDate)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(m => m.Payments.First().createrUserId)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(m => m.Payments.First().mounth)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(m => m.Payments.First().description)
                                </th>
                                <th></th>
                            </tr>
                        //}
                    }
                    @foreach (payment item in Model.Payments)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.Activity.name)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.payTotal)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.paymentDate)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.createrUserId)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.mounth)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.description)
                            </td>
                            <td>
                                @Html.ActionLink("Delete", "DeleteExtraPayment", new { id = item.id,activityId=item.activityId })
                            </td>
                        </tr>
                    }
                </table>
                <div id="activityPayments">
                    @*@foreach (payment pay in Model.Payments)
                    {
                        @Html.EditorFor(m => pay)
                    }*@
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" id="AddExtraPayment" value="Add Extra Payment" class="btn btn-default" />
            </div>
        </div>
    </div>
                        }



<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script>
    $(function () {

        $('#AddExtraPayment').on('click', function (e) {
            e.preventDefault();

            var $that = $(this);
            @*$.ajax('@Url.Action("AddExtraPayment")').done(function (html) {

                console.log(html);
                alert("bakalım");
                $('.children').append(html);

                var $form = $that.closest('form');
                $form.removeData('validator')
                     .removeData('unobtrusiveValidation');
                $.validator.unobtrusive.parse($form);
            });*@

            $.ajax({
                url: '@Url.Action("AddExtraPayment",new {id=Model.id })',
                type: 'Get',
                success: function (html) {
                    console.log(html);
                    $('#activityPayments').append(html);

                    var $form = $that.closest('form');
                    $form.removeData('validator')
                         .removeData('unobtrusiveValidation');
                    $.validator.unobtrusive.parse($form);
                },
                error: function () {
                    alert("something seems wrong");
                }
            });

        });

        $(document).on('click', '.remove', function (e) {
            e.preventDefault();
            $(this).parent('div').remove();
        });
    });
</script>